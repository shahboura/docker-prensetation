HyperV
	Mostly BIOS tick
	Can find it in search: HyperV

- Commands: docker version (client & server) --> making sure we can talk to engine
			docker info
			docker (list of commands & management commands)
				old: docker <command> (options)
				new: docker <command> <sub-command> (options)
				
docker container --publish 80:80 (--detach) nginx
	(new instance)(port host:dest)(background)(image)

docker container ls (all active containers)
	(old) docker ps
docker container ls -a (all containers active / stopped)
docker container top (containerId) --> processes in container
docker container rm -f fe617a2c4d28 fc410066fe66 4e6309902e75 (remove all ids)
curl localhost (to check if nginx is running)

where default name come from? scientest and hackers

breakdown of docker container run
	* look for image in cache
	* look for image in remote repository (hub)
	* download the latest image
	* create new container based upon that image
	* gives it new IP on a private network inside docker engine
	* if publish --> maps host to container port
	
Containers aren't mini-VMs, they are processes

docker container stop $(docker container ls -a -q)
docker image rm $(docker image ls -a -q)
=============================================================================================


docker container top -process list in one container
docker container inspect -details of one container configurations
docker	container states -perf states for all containers

docker container run -it --> start new container interactively
docker container exec -it --> run additional comand in existing container
docker container start -ai <containerId>

container lifetime is as long as the initial command is

Networks CLI management
It's better to have virtual network per domain
containers sharing same VN see each other --> see bookmark in section 3 lecture 28 
docker container port <containerId>
docker network ls
docker network inspect <networkId>
--network host option allocate it on host nework
	con: prevents security boundry of containerization
	pro: high network throuput
docker network create <network_name>
docker network connect
docker network disconnect
docker networks default security --> Lecture 30 bookmark


==========================================================================
Glossary:
–	Image: images are immutable
–	Dockerfile: Text file contains instruction how to build a Docker image
–	Build: the actual build command (docker file as input)
–	Compose (YAML): more advanced command for composing images
–	Container: instance of Docker image
–	Multi-stage Build: compilation SDK vs runtime
–	Repository: Collection of related images and their variants
–	SDKs (heavy)
–	Runtimes (light)
–	Platform (Win / Linux)
–	 Registry: Service to access repositories. i.e. DockerHub
–	Cluster: collection of Docker hosts exposed as single docker host
–	Orchestrator: tool simplifying management of clusters / docker hosts
–	Kubernetes
–	AzureServiceFabric
–	Docker Swarm
–	…

Useful illustrations:
–	Page 4 (host vs containers)
–	Page 6 (VM VS Docker)
–	Page 10 (docker ops lifecycle)

Docker images compatibility with hosts:
–	Linux image can run on Windows & Linux
–	Windows image can run on Windows
Dev environment
–	Can create images for Linux containers
–	Can create images for Windows & Linux containers 

Benefits of Docker:
–	Isolation
–	Env isolation between dev and ops
–	Portability
–	Scalability
–	Consistency

Ideas:
–	The full picture
==================================================================================